#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy, roslaunch
import numpy as np
import math
import cv2
from enum import Enum
from std_msgs.msg import UInt8
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError
from geometry_msgs.msg import Twist
import sys, select, os

if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel
#initialization
class DetectSign():
    def __init__(self):
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)    

        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_teleop/nodes', '')

        self.fnPreproc()

        self.sub_image_type = "raw" # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed" # you can choose image type "compressed", "raw"

        if self.sub_image_type == "compressed":

            # subscribes compressed image
            #self.sub_image_original = rospy.Subscriber('/detect/image_input/compressed', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindTrafficSign, queue_size = 1)
        elif self.sub_image_type == "raw":

            # subscribes raw image
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindTrafficSign, queue_size = 1)

        self.pub_traffic_sign = rospy.Publisher('/detect/traffic_sign', UInt8, queue_size=1)
    
    
        if self.pub_image_type == "compressed":

            # publishes traffic sign image in compressed type 

            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
        
        elif self.pub_image_type == "raw":

            # publishes traffic sign image in raw type

            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output', Image, queue_size = 1)
        

        self.cvBridge = CvBridge() 

        self.TrafficSign = Enum('TrafficSign', 'divide STOP6 parking5 tunnel SPEED_30 SPEED_50') 

        self.counter = 1

    def selection(self, option):
        return option

    def fnPreproc(self):

        # Initiate SIFT detector

        self.sift = cv2.xfeatures2d.SIFT_create()

 

        dir_path = os.path.dirname(os.path.realpath(__file__))

        dir_path = dir_path.replace('turtlebot3_autorace_detect/nodes', 'turtlebot3_autorace_detect/')

        dir_path += 'file/detect_sign/'

 

        self.img2 = cv2.imread(dir_path + 'STOP6.png',0)         # trainImage1

        self.img3 = cv2.imread(dir_path + 'parking5.png',0)      # trainImage2

        self.img4 = cv2.imread(dir_path + 'tunnel.png',0)       # trainImage3

        self.img5 = cv2.imread(dir_path + 'SPEED_30.png',0)       # trainImage4

        self.img6 = cv2.imread(dir_path + 'SPEED_50.png',0)       # trainImage5

 

        self.kp2, self.des2 = self.sift.detectAndCompute(self.img2,None)

        self.kp3, self.des3 = self.sift.detectAndCompute(self.img3,None)

        self.kp4, self.des4 = self.sift.detectAndCompute(self.img4,None)

        self.kp5, self.des5 = self.sift.detectAndCompute(self.img5,None)

        self.kp6, self.des6 = self.sift.detectAndCompute(self.img6,None)

 

        FLANN_INDEX_KDTREE = 0

        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 7)

        search_params = dict(checks = 50)

 

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

 

    def fnCalcMSE(self, arr1, arr2):

            squared_diff = (arr1 - arr2) ** 2

            sum = np.sum(squared_diff)

            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape

            err = sum / num_all

            return err

 

    def cbFindTrafficSign(self, image_msg):
        ob = DetectSign()
        # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.

        if self.counter % 5 != 0:

            self.counter += 1

            return

        else:

            self.counter = 1

 

        if self.sub_image_type == "compressed":

            #converting compressed image to opencv image

            np_arr = np.fromstring(image_msg.data, np.uint8)

            cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        elif self.sub_image_type == "raw":

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

 

        MIN_MATCH_COUNT = 9

        MIN_MSE_DECISION = 50000

 

        # find the keypoints and descriptors with SIFT

        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

 

        matches2 = self.flann.knnMatch(des1,self.des2,k=2)

        matches3 = self.flann.knnMatch(des1,self.des3,k=2)

        matches4 = self.flann.knnMatch(des1,self.des4,k=2)

        matches5 = self.flann.knnMatch(des1,self.des5,k=2)

        matches6 = self.flann.knnMatch(des1,self.des6,k=2)

 

        image_out_num = 1

 

        good2 = []

        for m,n in matches2:

            if m.distance < 0.7*n.distance:

                good2.append(m)

 

        if len(good2)>MIN_MATCH_COUNT:

            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good2 ]).reshape(-1,1,2)

            dst_pts = np.float32([ self.kp2[m.trainIdx].pt for m in good2 ]).reshape(-1,1,2)

 

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

            matchesMask2 = mask.ravel().tolist()

 

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:

                msg_sign = UInt8()

                msg_sign.data = self.TrafficSign.STOP6.value

 

                self.pub_traffic_sign.publish(msg_sign)

        

                rospy.loginfo("TrafficSign 2")

            

                image_out_num = 2
                ob.selection(image_out_num)

 

        else:

            matchesMask2 = None

 

        good3 = []

        for m,n in matches3:

            if m.distance < 0.7*n.distance:

                good3.append(m)

 

        if len(good3)>MIN_MATCH_COUNT:

            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good3 ]).reshape(-1,1,2)

            dst_pts = np.float32([ self.kp3[m.trainIdx].pt for m in good3 ]).reshape(-1,1,2)

 

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

            matchesMask3 = mask.ravel().tolist()

 

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:

                msg_sign = UInt8()

                msg_sign.data = self.TrafficSign.parking5.value

 

                self.pub_traffic_sign.publish(msg_sign)

 

                rospy.loginfo("TrafficSign 3")

 

                image_out_num = 3
                ob.selection(image_out_num)

 

        else:

            matchesMask3 = None

 

        good4 = []

        for m,n in matches4:

            if m.distance < 0.7*n.distance:

                good4.append(m)

        if len(good4)>MIN_MATCH_COUNT:

            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good4 ]).reshape(-1,1,2)

            dst_pts = np.float32([ self.kp4[m.trainIdx].pt for m in good4 ]).reshape(-1,1,2)

 

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

            matchesMask4 = mask.ravel().tolist()

 

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:

                msg_sign = UInt8()

                msg_sign.data = self.TrafficSign.tunnel.value

 

                self.pub_traffic_sign.publish(msg_sign)

 

                rospy.loginfo("TrafficSign 4")

 

                image_out_num = 4
                ob.selection(image_out_num)

 

        else:

            matchesMask4 = None

 

        good5 = []

        for m,n in matches5:

            if m.distance < 0.7*n.distance:

                    good5.append(m)

        if len(good5)>MIN_MATCH_COUNT:

            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good5 ]).reshape(-1,1,2)

            dst_pts = np.float32([ self.kp5[m.trainIdx].pt for m in good5 ]).reshape(-1,1,2)

 

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

            matchesMask5 = mask.ravel().tolist()

 

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:

                msg_sign = UInt8()

                msg_sign.data = self.TrafficSign.SPEED_30.value

 

                self.pub_traffic_sign.publish(msg_sign)

 

                rospy.loginfo("TrafficSign 5")

 

                image_out_num = 5
                ob.selection(image_out_num)

 

        else:

            matchesMask5 = None

 

        good6 = []

        for m,n in matches6:

            if m.distance < 0.7*n.distance:

                good6.append(m)

                

        if len(good6)>MIN_MATCH_COUNT:

            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good6 ]).reshape(-1,1,2)

            dst_pts = np.float32([ self.kp6[m.trainIdx].pt for m in good6 ]).reshape(-1,1,2)

 

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)

            matchesMask6 = mask.ravel().tolist()

 

            mse = self.fnCalcMSE(src_pts, dst_pts)

            if mse < MIN_MSE_DECISION:

                msg_sign = UInt8()

                msg_sign.data = self.TrafficSign.SPEED_50.value

 

                self.pub_traffic_sign.publish(msg_sign)

 

                rospy.loginfo("TrafficSign 6")

 

                image_out_num = 6
                ob.selection(image_out_num)

 

        else:

            matchesMask6 = None

 

        if image_out_num == 1:

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

 

        elif image_out_num == 2:

            draw_params2 = dict(matchColor = (0,0,255), # draw matches in green color

                            singlePointColor = None,

                            matchesMask = matchesMask2, # draw only inliers

                            flags = 2)

 

            final2 = cv2.drawMatches(cv_image_input,kp1,self.img2,self.kp2,good2,None,**draw_params2)

 

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final2, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final2, "bgr8"))

 

        elif image_out_num == 3:

            draw_params3 = dict(matchColor = (255,0,0), # draw matches in green color

                            singlePointColor = None,

                            matchesMask = matchesMask3, # draw only inliers

                            flags = 2)

 

            final3 = cv2.drawMatches(cv_image_input,kp1,self.img3,self.kp3,good3,None,**draw_params3)

 

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final3, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final3, "bgr8"))

 

        elif image_out_num == 4:

            draw_params4 = dict(matchColor = (255,0,0), # draw matches in green color

                            singlePointColor = None,

                            matchesMask = matchesMask4, # draw only inliers

                            flags = 2)

 

            final4 = cv2.drawMatches(cv_image_input,kp1,self.img4,self.kp4,good4,None,**draw_params4)

 

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final4, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final4, "bgr8"))

 

        elif image_out_num == 5:

            draw_params5 = dict(matchColor = (255,0,0), # draw matches in green color

                            singlePointColor = None,

                            matchesMask = matchesMask5, # draw only inliers

                            flags = 2)

 

            final5 = cv2.drawMatches(cv_image_input,kp1,self.img5,self.kp5,good5,None,**draw_params5)

 

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final5, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final5, "bgr8"))

                

        elif image_out_num == 6:

            draw_params6 = dict(matchColor = (255,0,0), # draw matches in green color

                            singlePointColor = None,

                            matchesMask = matchesMask6, # draw only inliers

                            flags = 2)

 

            final6 = cv2.drawMatches(cv_image_input,kp1,self.img6,self.kp6,good6,None,**draw_params6)

 

            if self.pub_image_type == "compressed":

                # publishes traffic sign image in compressed type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final6, "jpg"))

 

            elif self.pub_image_type == "raw":

                # publishes traffic sign image in raw type

                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final6, "bgr8"))

    def Decider(self):
        ob = DetectSign()
        if ob.selection(1):
            target_linear_vel   = 0.0
            control_linear_vel  = 0.0
            target_angular_vel  = 0.0
            control_angular_vel = 0.0
                    
            self.launch_detect_stop = roslaunch.scriptapi.ROSLaunch()
            self.launch_detect_stop = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_teleop/launch/turtlebot3_teleop_key.launch"])
            self.launch_detect_stop.start()   
            #time.sleep(3)
            #self.launch_detect_stop.shutdown()
                    
        elif opt == 5:
            target_linear_vel -= 0.01

    def main(self):
        rospy.spin()

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('please')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    
    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    
    #node = DetectSign()

    try:
        print msg
        while(1):
            key = getKey()

            #steady speed (forward)
            target_linear_vel = 0.01
            print vels(target_linear_vel,target_angular_vel)

            #node.Decider(2)

            if (key == '\x03'):
                    break

            if status == 20 :
                print msg
                status = 0

            twist = Twist()

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

            pub.publish(twist)

    except:
        print e